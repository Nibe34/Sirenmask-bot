
================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\run.py
================================================================================

from telegram.ext import ApplicationBuilder
from sirenmask.bot.handlers import register_handlers
from sirenmask.config import TELEGRAM_TOKEN

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    register_handlers(app)
    app.run_polling()

if __name__ == "__main__":
    main()

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\config.py
================================================================================

import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "").split(",")))
VOICE_MODELS_PATH = os.getenv("VOICE_MODELS_PATH", "models")
TEMP_PATH = "temp/"

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\__init__.py
================================================================================


================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\bot\handlers.py
================================================================================

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from .whitelist import is_authorized
from .voice_utils import process_voice
from sirenmask.rvc_engine.model_manager import get_available_models
from sirenmask.bot.state import get_user_model, set_user_model, set_user_settings, get_user_menu, set_user_menu
from sirenmask.bot.state import get_user_settings, reset_user_settings
from telegram.ext import filters
from telegram import ReplyKeyboardMarkup, KeyboardButton

"""
default_settings = {
    "f0_up_key": 2,
    "index_rate": 0.8,
    "filter_radius": 7,
    "resample_sr": 48000,
    "rms_mix_rate": 0.25,
    "protect": 0.5
}
"""

default_settings = {
    "f0_up_key": 2,
    "index_rate": 0.8,
    "filter_radius": 7,
    "rms_mix_rate": 0.25,
    "protect": 0.5
}

PARAM_OPTIONS = {
    "f0_up_key": [-12, -6, -3, 0, 3, 6, 12],
    "index_rate": [0.0, 0.25, 0.5, 0.8, 1.0],
    "filter_radius": [0, 3, 7],
    "rms_mix_rate": [0.0, 0.25, 0.5, 0.75, 1.0],
    "protect": [0.0, 0.33, 0.5, 0.7, 1.0],
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return

    set_user_menu(update.effective_user.id, "main")
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.", reply_markup=get_main_keyboard())



async def select_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return

    models = get_available_models()
    if not models:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤.")
        return

    keyboard = [
        [InlineKeyboardButton(model_name, callback_data=model_name)]
        for model_name in models
    ]

    await update.message.reply_text(
        "üéôÔ∏è –û–±–µ—Ä–∏ –≥–æ–ª–æ—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def format_settings_text(settings):
    return "üåõ –ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n" + "\n".join(
        f"{k}: {settings.get(k, default_settings[k])}" for k in default_settings
    )


async def set_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    model_name = query.data

    set_user_model(user_id, model_name)  # ‚úÖ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª

    await query.answer()
    await query.edit_message_text(f"‚úÖ –ì–æ–ª–æ—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {model_name}")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        return

    model = get_user_model(user_id)  # ‚úÖ –æ—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É –º–æ–¥–µ–ª—å
    if not model:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ /select_voice")
        return

    voice_file = await update.message.voice.get_file()
    settings = get_user_settings(user_id)
    output_path = await process_voice(voice_file, model, settings)
    await update.message.reply_voice(voice=open(output_path, "rb"))




async def voice_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        return

    args = context.args
    if not args:
        # –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ
        current = get_user_settings(user_id) or default_settings
        text = "üéõ –ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n" + "\n".join(
            f"{k}: {v}" for k, v in current.items()
        )
        text += "\n\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏: /voice_settings f0_up_key=3"
        text += "\n–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö: /voice_settings reset"
        await update.message.reply_text(text)
        return

    if args[0] == "reset":
        reset_user_settings(user_id)
        await update.message.reply_text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö.")
        return

    # –∑–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    try:
        key, value = args[0].split("=")
        if key not in default_settings:
            await update.message.reply_text("‚õî –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
            return
        value = type(default_settings[key])(value)
        current = get_user_settings(user_id) or default_settings.copy()
        current[key] = value
        set_user_settings(user_id, current)
        await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {key} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {value}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.")


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéô –û–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å", callback_data="menu_select_voice")],
        [InlineKeyboardButton("üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="menu_settings")],
        [InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", callback_data="menu_reset_settings")],
    ])

    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=keyboard)

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if not is_authorized(user_id):
        await query.answer("üö´ –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ", show_alert=True)
        return

    data = query.data

    if data == "menu_select_voice":
        await query.answer()
        await select_voice(update, context)
    elif data == "menu_settings":
        await query.answer()
        current = get_user_settings(user_id) or default_settings
        text = "üéõ –ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n" + "\n".join(
            f"{k}: {v}" for k, v in current.items()
        )
        await query.edit_message_text(text)
    elif data == "menu_reset_settings":
        reset_user_settings(user_id)
        await query.answer("‚úÖ –°–∫–∏–Ω—É—Ç–æ")
        await query.edit_message_text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö.")
    else:
        await query.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä")


def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üéô –û–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å")],
            [KeyboardButton("üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")],
        ],
        resize_keyboard=True,  # –∞–¥–∞–ø—Ç—É—î –ø—ñ–¥ –µ–∫—Ä–∞–Ω
        one_time_keyboard=False
    )

def get_settings_description_text():
    return (
        "üìò *–ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:*\n\n"
        "*f0_up_key* ‚Äî —Ç—Ä–∞–Ω—Å–ø–æ–∑–∏—Ü—ñ—è –≥–æ–ª–æ—Å—É (–≤ –ø—ñ–≤—Ç–æ–Ω–∞—Ö).\n"
        "   –ù–∞–ø—Ä.: `+12` ‚Äî –≤–∏—â–∏–π –≥–æ–ª–æ—Å, `-12` ‚Äî –Ω–∏–∂—á–∏–π.\n\n"
        "*index_rate* ‚Äî –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Å–∏–ª—å–Ω–æ –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —ñ–Ω–¥–µ–∫—Å–Ω–∞ –º–æ–¥–µ–ª—å (0.0‚Äì1.0).\n"
        "   –í–∏—â—ñ –∑–Ω–∞—á–µ–Ω–Ω—è = –±—ñ–ª—å—à–µ —Å—Ö–æ–∂–æ—Å—Ç—ñ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –≥–æ–ª–æ—Å–æ–º.\n\n"
        "*filter_radius* ‚Äî —Å—Ç—É–ø—ñ–Ω—å –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è f0 (0 = –≤–∏–º–∫–Ω–µ–Ω–æ, 3‚Äì7 = –±—ñ–ª—å—à–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è).\n\n"
        "*rms_mix_rate* ‚Äî –º—ñ–∫—Å–∏–Ω–≥ –≥—É—á–Ω–æ—Å—Ç—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É (0.0‚Äì1.0).\n"
        "   1.0 ‚Äî –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≥—É—á–Ω—ñ—Å—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –ø–æ–≤–Ω—ñ—Å—Ç—é, 0.0 ‚Äî —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏.\n\n"
        "*protect* ‚Äî –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Å–∏–ª—å–Ω–æ –∑–∞—Ö–∏—â–∞—Ç–∏ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ —á–∞—Å—Ç–æ—Ç–∏ (0.0‚Äì1.0).\n"
        "   –í–∏—â—ñ –∑–Ω–∞—á–µ–Ω–Ω—è = –º–µ–Ω—à–µ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω—å —É '—à–µ–ø—ñ—Ç–Ω–∏—Ö' –∞–±–æ '–ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö' –∑–≤—É–∫–∞—Ö.\n"
    )

def get_settings_main_keyboard():
    from sirenmask.bot.handlers import default_settings

    keys = list(default_settings.keys())
    keyboard = []

    for i in range(0, len(keys), 2):
        row = [KeyboardButton(keys[i])]
        if i + 1 < len(keys):
            row.append(KeyboardButton(keys[i + 1]))
        keyboard.append(row)

    keyboard.append([KeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")])
    keyboard.append([KeyboardButton("‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")])
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_parameter_values_keyboard(param_name):
    from sirenmask.bot.handlers import PARAM_OPTIONS
    options = PARAM_OPTIONS.get(param_name, [])

    keyboard = []

    for i in range(0, len(options), 2):
        row = []
        row.append(KeyboardButton(str(options[i])))
        if i + 1 < len(options):
            row.append(KeyboardButton(str(options[i + 1])))
        keyboard.append(row)

    keyboard.append([
        KeyboardButton("‚ûñ –ó–º–µ–Ω—à–∏—Ç–∏"),
        KeyboardButton("‚ûï –ó–±—ñ–ª—å—à–∏—Ç–∏")
    ])

    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def handle_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from sirenmask.bot.handlers import default_settings, PARAM_OPTIONS
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        return

    text = update.message.text.strip()
    menu = get_user_menu(user_id)
    current_settings = get_user_settings(user_id) or default_settings.copy()

    def format_settings(settings):
        return "üéõ –ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n" + "\n".join(f"{k}: {v}" for k, v in settings.items())

    # --- MAIN MENU ---
    if menu == "main":
        if text == "üéô –û–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å":
            set_user_menu(user_id, "voice_select")
            await update.message.reply_text("üéô –û–±–µ—Ä–∏ –≥–æ–ª–æ—Å:", reply_markup=get_voice_select_keyboard())
        elif text == "üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
            set_user_menu(user_id, "settings_main")
            await update.message.reply_text(format_settings(current_settings))
            await update.message.reply_text("‚öôÔ∏è –û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:", reply_markup=get_settings_main_keyboard())
        elif text == "üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏":
            reset_user_settings(user_id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö.", reply_markup=get_main_keyboard())

    # --- VOICE SELECTION ---
    elif menu == "voice_select":
        if text == "üîô –ù–∞–∑–∞–¥":
            set_user_menu(user_id, "main")
            await update.message.reply_text("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_keyboard())
        else:
            from sirenmask.rvc_engine.model_manager import get_available_models
            if text in get_available_models():
                set_user_model(user_id, text)
                set_user_menu(user_id, "main")
                await update.message.reply_text(f"‚úÖ –ì–æ–ª–æ—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}", reply_markup=get_main_keyboard())
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –≥–æ–ª–æ—Å.")

    # --- SETTINGS MENU ---
    elif menu == "settings_main":
        if text == "üîô –ù–∞–∑–∞–¥":
            set_user_menu(user_id, "main")
            await update.message.reply_text("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_keyboard())

        elif text == "üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏":
            reset_user_settings(user_id)
            current_settings = get_user_settings(user_id) or default_settings.copy()
            await update.message.reply_text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö.")
            await update.message.reply_text(format_settings(current_settings), reply_markup=get_settings_main_keyboard())

        elif text in default_settings:
            set_user_menu(user_id, f"settings_param_{text}")
            await update.message.reply_text(format_settings(current_settings))
            await update.message.reply_text(
                f"üîß –û–±–µ—Ä–∏ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è `{text}`:",
                reply_markup=get_parameter_values_keyboard(text),
                parse_mode="Markdown"
            )
        elif text == "‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤":
            await update.message.reply_text(get_settings_description_text(), parse_mode="Markdown")


        else:
            await update.message.reply_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")

    # --- PARAM VALUE MENU ---
    elif menu.startswith("settings_param_"):
        param = menu.replace("settings_param_", "")
        if param not in default_settings:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.")
            return

        value = current_settings.get(param, default_settings[param])
        delta = {
            "f0_up_key": 1,
            "index_rate": 0.05,
            "filter_radius": 1,
            "rms_mix_rate": 0.05,
            "protect": 0.05,
        }.get(param, 1)

        if text == "üîô –ù–∞–∑–∞–¥":
            set_user_menu(user_id, "settings_main")
            await update.message.reply_text(format_settings(current_settings))
            await update.message.reply_text("‚öôÔ∏è –û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=get_settings_main_keyboard())

        elif text == "‚ûï –ó–±—ñ–ª—å—à–∏—Ç–∏":
            new_value = round(value + delta, 3)
            current_settings[param] = new_value
            set_user_settings(user_id, current_settings)
            await update.message.reply_text(f"‚úÖ {param} –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–æ {new_value}")
            await update.message.reply_text(format_settings(current_settings), reply_markup=get_parameter_values_keyboard(param))

        elif text == "‚ûñ –ó–º–µ–Ω—à–∏—Ç–∏":
            new_value = round(value - delta, 3)
            current_settings[param] = new_value
            set_user_settings(user_id, current_settings)
            await update.message.reply_text(f"‚úÖ {param} –∑–º–µ–Ω—à–µ–Ω–æ –¥–æ {new_value}")
            await update.message.reply_text(format_settings(current_settings), reply_markup=get_parameter_values_keyboard(param))

        else:
            try:
                typed = type(default_settings[param])(text)
                current_settings[param] = typed
                set_user_settings(user_id, current_settings)
                set_user_menu(user_id, "settings_main")
                await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {typed}")
                await update.message.reply_text(format_settings(current_settings), reply_markup=get_settings_main_keyboard())
            except:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")




def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üéô –û–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å")],
            [KeyboardButton("üéõ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
        ],
        resize_keyboard=True
    )

def get_voice_select_keyboard():
    from sirenmask.rvc_engine.model_manager import get_available_models
    models = get_available_models()

    keyboard = [[KeyboardButton(name)] for name in models]
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)












def register_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("select_voice", select_voice))
    app.add_handler(CommandHandler("voice_settings", voice_settings))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^menu_"))
    app.add_handler(CallbackQueryHandler(set_voice))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_buttons))





================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\bot\state.py
================================================================================

import json
import os

STATE_FILE = "user_state.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
if os.path.exists(STATE_FILE):
    with open(STATE_FILE, "r", encoding="utf-8") as f:
        user_state = json.load(f)
    # üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É: —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Ä—è–¥–æ–∫, –æ–±–≥–æ—Ä—Ç–∞—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫
    for uid, value in list(user_state.items()):
        if isinstance(value, str):
            user_state[uid] = {"model": value}
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–¥—Ä–∞–∑—É, —è–∫—â–æ –±—É–ª–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(user_state, f, ensure_ascii=False, indent=2)
else:
    user_state = {}

def save_state():
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(user_state, f, ensure_ascii=False, indent=2)

def get_user_model(user_id: int) -> str | None:
    return user_state.get(str(user_id), {}).get("model")

def set_user_model(user_id: int, model_name: str):
    uid = str(user_id)
    if uid not in user_state:
        user_state[uid] = {}
    user_state[uid]["model"] = model_name
    save_state()

def get_user_settings(user_id: int) -> dict:
    return user_state.get(str(user_id), {}).get("settings", {})

def set_user_settings(user_id: int, settings: dict):
    uid = str(user_id)
    if uid not in user_state:
        user_state[uid] = {}
    user_state[uid]["settings"] = settings
    save_state()

def reset_user_settings(user_id: int):
    uid = str(user_id)
    if uid in user_state and "settings" in user_state[uid]:
        del user_state[uid]["settings"]
        save_state()

def get_user_menu(user_id: int) -> str:
    return user_state.get(str(user_id), {}).get("menu", "main")

def set_user_menu(user_id: int, menu_name: str):
    uid = str(user_id)
    if uid not in user_state:
        user_state[uid] = {}
    user_state[uid]["menu"] = menu_name
    save_state()
================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\bot\voice_utils.py
================================================================================

import os
import uuid
from sirenmask.config import TEMP_PATH
from sirenmask.rvc_engine.rvc_wrapper import convert_voice
from sirenmask.utils.audio import convert_ogg_to_wav

async def process_voice(file, model_name, user_settings=None):
    uid = uuid.uuid4().hex
    ogg_path = os.path.join(TEMP_PATH, f"{uid}.ogg")
    wav_path = ogg_path.replace(".ogg", ".wav")
    output_path = ogg_path.replace(".ogg", "_converted.wav")

    await file.download_to_drive(ogg_path)
    convert_ogg_to_wav(ogg_path, wav_path)
    convert_voice(wav_path, model_name, output_path, user_settings)
    return output_path

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\bot\whitelist.py
================================================================================

from sirenmask.config import ALLOWED_USERS

def is_authorized(user_id: int) -> bool:
    #return user_id in ALLOWED_USERS
    return True         # –ø–æ–∫–∏ —â–æ –≤–∏–º–∫–Ω—É–≤ –≤–∞–π—Ç–ª—ñ—Å—Ç, –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞. –º–æ–∂–µ, –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ —è–∫–∞—Å—å –±—ñ–∑–Ω–µ—Å –ª–æ–≥—ñ–∫–∞

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\bot\__init__.py
================================================================================


================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\rvc_engine\model_manager.py
================================================================================

import os
from sirenmask.config import VOICE_MODELS_PATH

def get_available_models():
    return [
        name for name in os.listdir(VOICE_MODELS_PATH)
        if os.path.isdir(os.path.join(VOICE_MODELS_PATH, name))
    ]

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\rvc_engine\postprocess.py
================================================================================

import os
import subprocess
import librosa
import numpy as np
import soundfile as sf

def postprocess_audio(audio_path: str, output_path: str):
    # –ü–æ—Å—Ç–æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ: –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è + —à—É–º–æ–∑–∞–≥–ª—É—à–µ–Ω–Ω—è (—á–µ—Ä–µ–∑ ffmpeg)
    y, sr = librosa.load(audio_path, sr=None)
    peak = np.max(np.abs(y))
    if peak > 0:
        y = y / peak * 0.95

    temp_norm = output_path.replace(".wav", "_norm.wav")
    sf.write(temp_norm, y, sr)

    command = [
        "ffmpeg", "-y",
        "-i", temp_norm,
        "-af", "afftdn=nf=-25",
        output_path
    ]
    subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    os.remove(temp_norm)

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\rvc_engine\rvc_wrapper.py
================================================================================

import sys
import os
from types import SimpleNamespace
import torch
import soundfile as sf

from sirenmask.config import VOICE_MODELS_PATH
sys.path.append(os.path.abspath("rvc_lib"))
from rvc_lib.infer.modules.vc.modules import VC
from sirenmask.rvc_engine.postprocess import postprocess_audio


vc_model = None
current_model_name = None

def convert_voice(input_path, model_name, output_path, user_settings=None):
    global vc_model, current_model_name

    model_dir = os.path.join(VOICE_MODELS_PATH, model_name)
    model_pth = next((f for f in os.listdir(model_dir) if f.endswith(".pth")), None)
    index_file = next((f for f in os.listdir(model_dir) if f.endswith(".index.pkl")), "")

    if not model_pth:
        raise FileNotFoundError("–ú–æ–¥–µ–ª—å .pth –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤: " + model_dir)

    # –¢–µ–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ —ñ–º‚Äô—è —Ñ–∞–π–ª—É
    model_pth_filename = model_pth
    index_path = os.path.join(model_dir, index_file) if index_file else ""

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è, —è–∫—â–æ –Ω–æ–≤–∞ –º–æ–¥–µ–ª—å
    if vc_model is None or current_model_name != model_pth_filename:
        config = SimpleNamespace(
            is_half=False,
            device="cuda" if torch.cuda.is_available() else "cpu",
            x_pad=1,
            x_query=10,
            x_center=60,
            x_max=65
        )
        vc_model = VC(config)
        current_model_name = model_pth_filename

        os.environ["weight_root"] = VOICE_MODELS_PATH  # —Ü–µ –≤–∞–∂–ª–∏–≤–æ
        print(f"[‚úÖ] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {model_pth_filename}")
        relative_model_path = os.path.join(model_name, model_pth_filename)
        os.environ["weight_root"] = VOICE_MODELS_PATH
        os.environ["index_root"] = VOICE_MODELS_PATH
        os.environ["rmvpe_root"] = os.path.join("rvc_lib", "assets", "rmvpe")
        vc_model.get_vc(relative_model_path)

    settings = user_settings or {}
    info, output = vc_model.vc_single(
        sid=0,
        input_audio_path=input_path,
        f0_up_key=settings.get("f0_up_key", 2),
        f0_file=None,
        f0_method="rmvpe",
        file_index=index_path,
        file_index2="",
        index_rate=settings.get("index_rate", 0.8),
        filter_radius=settings.get("filter_radius", 7),
        resample_sr=settings.get("resample_sr", 48000),
        rms_mix_rate=settings.get("rms_mix_rate", 0.25),
        protect=settings.get("protect", 0.5)
    )

    if "Success" in info:
        sr, audio = output
        temp_path = output_path.replace(".wav", "_raw.wav")
        sf.write(temp_path, audio, sr)
        postprocess_audio(temp_path, output_path)
        os.remove(temp_path)
    else:
        raise RuntimeError(f"üî¥ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {info}")

================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\rvc_engine\__init__.py
================================================================================


================================================================================
# –§–∞–π–ª: C:\Users\Nibe\Documents\GitHub\Sirenmask-bot\sirenmask\utils\audio.py
================================================================================

import os

def convert_ogg_to_wav(ogg_path, wav_path):
    os.system(f"ffmpeg -y -i \"{ogg_path}\" -ar 44100 -ac 1 \"{wav_path}\"")
